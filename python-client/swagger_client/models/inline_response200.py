# coding: utf-8

"""
    Swagger REST Article

    This is the swagger file that goes with our server code  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_id': 'str',
        'service_type': 'str',
        'service_name': 'str',
        'service_params': 'str',
        'service_resources': 'list[IntersiteverticalServiceResources]',
        'service_interconnections': 'list[IntersiteverticalServiceInterconnections]'
    }

    attribute_map = {
        'service_id': 'service_id',
        'service_type': 'service_type',
        'service_name': 'service_name',
        'service_params': 'service_params',
        'service_resources': 'service_resources',
        'service_interconnections': 'service_interconnections'
    }

    def __init__(self, service_id=None, service_type=None, service_name=None, service_params=None, service_resources=None, service_interconnections=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501

        self._service_id = None
        self._service_type = None
        self._service_name = None
        self._service_params = None
        self._service_resources = None
        self._service_interconnections = None
        self.discriminator = None

        if service_id is not None:
            self.service_id = service_id
        if service_type is not None:
            self.service_type = service_type
        if service_name is not None:
            self.service_name = service_name
        if service_params is not None:
            self.service_params = service_params
        if service_resources is not None:
            self.service_resources = service_resources
        if service_interconnections is not None:
            self.service_interconnections = service_interconnections

    @property
    def service_id(self):
        """Gets the service_id of this InlineResponse200.  # noqa: E501

        ID of the inter-site service  # noqa: E501

        :return: The service_id of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this InlineResponse200.

        ID of the inter-site service  # noqa: E501

        :param service_id: The service_id of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def service_type(self):
        """Gets the service_type of this InlineResponse200.  # noqa: E501

        Inter-site service type (L2 or L3)  # noqa: E501

        :return: The service_type of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this InlineResponse200.

        Inter-site service type (L2 or L3)  # noqa: E501

        :param service_type: The service_type of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._service_type = service_type

    @property
    def service_name(self):
        """Gets the service_name of this InlineResponse200.  # noqa: E501

        Name of the inter-site service  # noqa: E501

        :return: The service_name of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this InlineResponse200.

        Name of the inter-site service  # noqa: E501

        :param service_name: The service_name of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def service_params(self):
        """Gets the service_params of this InlineResponse200.  # noqa: E501

        Additional params for the inter-site service  # noqa: E501

        :return: The service_params of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._service_params

    @service_params.setter
    def service_params(self, service_params):
        """Sets the service_params of this InlineResponse200.

        Additional params for the inter-site service  # noqa: E501

        :param service_params: The service_params of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._service_params = service_params

    @property
    def service_resources(self):
        """Gets the service_resources of this InlineResponse200.  # noqa: E501

        Resources to federate  # noqa: E501

        :return: The service_resources of this InlineResponse200.  # noqa: E501
        :rtype: list[IntersiteverticalServiceResources]
        """
        return self._service_resources

    @service_resources.setter
    def service_resources(self, service_resources):
        """Sets the service_resources of this InlineResponse200.

        Resources to federate  # noqa: E501

        :param service_resources: The service_resources of this InlineResponse200.  # noqa: E501
        :type: list[IntersiteverticalServiceResources]
        """

        self._service_resources = service_resources

    @property
    def service_interconnections(self):
        """Gets the service_interconnections of this InlineResponse200.  # noqa: E501

        Locally created interconnections  # noqa: E501

        :return: The service_interconnections of this InlineResponse200.  # noqa: E501
        :rtype: list[IntersiteverticalServiceInterconnections]
        """
        return self._service_interconnections

    @service_interconnections.setter
    def service_interconnections(self, service_interconnections):
        """Sets the service_interconnections of this InlineResponse200.

        Locally created interconnections  # noqa: E501

        :param service_interconnections: The service_interconnections of this InlineResponse200.  # noqa: E501
        :type: list[IntersiteverticalServiceInterconnections]
        """

        self._service_interconnections = service_interconnections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
